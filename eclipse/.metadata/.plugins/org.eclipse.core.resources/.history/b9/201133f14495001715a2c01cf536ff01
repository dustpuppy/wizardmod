package thewizardmod.mirror;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import net.minecraft.client.renderer.EntityRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;
import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
import net.minecraft.client.settings.GameSettings;
import net.minecraft.entity.Entity;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;

import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GL11;

public class MirrorRenderer extends TileEntitySpecialRenderer<TileEntityBlockMirror>
{
	private int quality = 128;
	private long renderEndNanoTime;
	private ResourceLocation texture = new ResourceLocation("thewizardmod:textures/items/magic_mirror.png");
	
	public void render(TileEntityBlockMirror mirror, double x, double y, double z, float partialTicks, int destroyStage, float alpha)
	{
		
//		if (!registerMirrors.containsKey(mirror.getMirror()))
		{
			int newTextureId = GL11.glGenTextures();
			GlStateManager.bindTexture(newTextureId);
			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGB, quality, quality, 0, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, BufferUtils.createByteBuffer(3 * quality * quality));
			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
			return;
		}
		

		EnumFacing facing = EnumFacing.getHorizontal(mirror.getBlockMetadata());
		GlStateManager.pushMatrix();
		{
			GlStateManager.enableBlend();
			OpenGlHelper.glBlendFunc(770, 771, 1, 0);

			GlStateManager.disableLighting();
			GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
			GlStateManager.bindTexture(texture);

			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);

			GlStateManager.translate(x + 0.5, y, z + 0.5);
			GlStateManager.rotate(-90F * facing.getHorizontalIndex() + 180F, 0, 1, 0);
			GlStateManager.translate(-0.5F, 0, -0.43F);

			GlStateManager.enableRescaleNormal();

			// Render
			GL11.glBegin(GL11.GL_QUADS);
			{
				GL11.glTexCoord2d(1, 0);
				GL11.glVertex3d(0.0625, 0.0625, 0);
				GL11.glTexCoord2d(0, 0);
				GL11.glVertex3d(0.9375, 0.0625, 0);
				GL11.glTexCoord2d(0, 1);
				GL11.glVertex3d(0.9375, 0.9375, 0);
				GL11.glTexCoord2d(1, 1);
				GL11.glVertex3d(0.0625, 0.9375, 0);
			}
			GL11.glEnd();

			GlStateManager.disableRescaleNormal();
			GlStateManager.disableBlend();
			GlStateManager.enableLighting();
		}
		GlStateManager.popMatrix();
	}

}
