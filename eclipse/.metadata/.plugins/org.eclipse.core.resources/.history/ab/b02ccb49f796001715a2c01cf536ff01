package thewizardmod.fluids;

import javax.annotation.Nullable;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.InventoryBasic;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.play.server.SPacketUpdateTileEntity;
import net.minecraft.util.ITickable;
import net.minecraftforge.fluids.Fluid;
import net.minecraftforge.fluids.FluidStack;
import net.minecraftforge.fluids.capability.TileFluidHandler;

public class TileEntityTank extends TileFluidHandler  implements IInventory, ITickable{
	
	public static final int CAPACITY = 11 * Fluid.BUCKET_VOLUME;

	public InventoryBasic inventory;
	private int slotCount = 2;
	
	public TileEntityTank() {
		tank = new FluidTankWithTile(this, CAPACITY);
		tank.setFluid(new FluidStack(StartupCommon.fluidMagic, 1));
		
		inventory = new InventoryBasic("tankInventory", false, slotCount);
	}

	
	@Override
	public NBTTagCompound writeToNBT(NBTTagCompound compound) {
		
		NBTTagList list = new NBTTagList();
		for(int i = 0; i < inventory.getSizeInventory(); i++)
		{
			if(inventory.getStackInSlot(i) != null)
			{
				NBTTagCompound tag = new NBTTagCompound();
				tag.setByte("slot", (byte)i);
				inventory.getStackInSlot(i).writeToNBT(tag);
				list.appendTag(tag);
			}
		}
		compound.setTag("itemStacks", list);
		
		return super.writeToNBT(compound);
	}

	@Override
	public void readFromNBT(NBTTagCompound compound) {
		super.readFromNBT(compound);
		
		NBTTagList list = compound.getTagList("itemStacks", 10);
		this.inventory = new InventoryBasic("tankInventory", false, slotCount);
		for(int i = 0; i < list.tagCount(); i++)
		{
			NBTTagCompound tag = list.getCompoundTagAt(i);
			byte b = tag.getByte("slot");
			if(b >=0 && b < inventory.getSizeInventory())
			{
				inventory.setInventorySlotContents(b, ItemStack.loadItemStackFromNBT(tag));
			}
		}
	}
	
	
	@Override
	public NBTTagCompound getUpdateTag() {
		return writeToNBT(new NBTTagCompound());
	}

	@Nullable
	@Override
	public SPacketUpdateTileEntity getUpdatePacket() {
		return new SPacketUpdateTileEntity(getPos(), 0, getUpdateTag());
	}

	@Override
	public void onDataPacket(NetworkManager net, SPacketUpdateTileEntity pkt) {
		readFromNBT(pkt.getNbtCompound());
	}


	@Override
	public String getName() {
		return "container.twm_tank.name";
	}


	@Override
	public boolean hasCustomName() {
		return false;
	}


	@Override
	public void update() {
		// TODO Auto-generated method stub
		
	}


	@Override
	public int getSizeInventory() {
		return slotCount;
	}


	@Override
	@Nullable
	public ItemStack getStackInSlot(int index) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	@Nullable
	public ItemStack decrStackSize(int index, int count) {
		// TODO Auto-generated method stub
		return null;
	}


	/**
	 * This method removes the entire contents of the given slot and returns it.
	 * Used by containers such as crafting tables which return any items in their slots when you close the GUI
	 * @param slotIndex
	 * @return
	 */
	@Override
	public ItemStack removeStackFromSlot(int slotIndex) {
		ItemStack itemStack = getStackInSlot(slotIndex);
		if (itemStack != null) setInventorySlotContents(slotIndex, null);
		return itemStack;
	}


	@Override
	public void setInventorySlotContents(int index, @Nullable ItemStack stack) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public int getInventoryStackLimit() {
		return 1;
	}


	@Override
	public boolean isUseableByPlayer(EntityPlayer player) {
		if (this.worldObj.getTileEntity(this.pos) != this) return false;
		final double X_CENTRE_OFFSET = 0.5;
		final double Y_CENTRE_OFFSET = 0.5;
		final double Z_CENTRE_OFFSET = 0.5;
		final double MAXIMUM_DISTANCE_SQ = 8.0 * 8.0;
		return player.getDistanceSq(pos.getX() + X_CENTRE_OFFSET, pos.getY() + Y_CENTRE_OFFSET, pos.getZ() + Z_CENTRE_OFFSET) < MAXIMUM_DISTANCE_SQ;
	}


	@Override
	public void openInventory(EntityPlayer player) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void closeInventory(EntityPlayer player) {
		// TODO Auto-generated method stub
		
	}


	// Unused unless your container specifically uses it.
	// Return true if the given stack is allowed to go in the given slot
	@Override
	public boolean isItemValidForSlot(int slotIndex, ItemStack itemstack) {
		return false;
	}


	@Override
	public int getField(int id) {
		// TODO Auto-generated method stub
		return 0;
	}


	@Override
	public void setField(int id, int value) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public int getFieldCount() {
		// TODO Auto-generated method stub
		return 0;
	}


	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}

}