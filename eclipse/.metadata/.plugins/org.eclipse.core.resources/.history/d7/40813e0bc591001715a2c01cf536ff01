package thewizardmod.altar;

import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import thewizardmod.pedestral.TileEntityPedestral;
import thewizardmod.runeSlab.StartupCommon;
import thewizardmod.runeSlab.TileEntityRuneSlab;

public class Altar {
	
	public static Item altarRecipeResult[] = {
		thewizardmod.Wands.StartupCommon.blazeWand,
		Item.getItemFromBlock(thewizardmod.chest.StartupCommon.blockInventoryBasic)
		};
	
	public static Item altarRecipeInputs[][] = {
		{thewizardmod.items.StartupCommon.magicGem, thewizardmod.items.StartupCommon.shadowDust, Items.BLAZE_ROD, Items.BLAZE_ROD},
		{thewizardmod.items.StartupCommon.magicGem, thewizardmod.items.StartupCommon.shadowDust, Items.CLOCK, Item.getItemFromBlock(Blocks.CHEST)}
	};
	
	public static BlockPos pedestralPos[] = {null, null, null, null};
	public static Item pedestralItems[] = {null, null, null, null};
	
	public static Item returnAltarResult(World world)
	{
		int itemCount = 0;
		
		for(int i = 0; i < altarRecipeInputs.length; i++)
		{
			for(int j = 0; j < altarRecipeInputs[i].length; j++)
			{
				for(int k = 0; k < pedestralItems.length; k++)
				{
					if(altarRecipeInputs[i][j] == pedestralItems[k])
					{
						itemCount += 1;
//						break;
					}
				}
				if(itemCount == 4)
				{
					for(int k = 0; k < pedestralPos.length; k ++)
					{
						TileEntity tileEntity = world.getTileEntity(pedestralPos[k]);
						if(tileEntity instanceof TileEntityPedestral)
						{
						TileEntityPedestral pedestral = (TileEntityPedestral) tileEntity;
					  	pedestral.deleteItem();
					  	pedestralItems[k] = null;
						}
					}
					return altarRecipeResult[i];
				}
			}
		}
		return null;
	}
	
	
	
	public static int runeTypes[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	
	public static int checkForRunes(World world, BlockPos pos, IBlockState state, EntityPlayer player)
	{
		int runeCount = 0;
		double x = pos.getX();
		double y = pos.getY();
		double z = pos.getZ();
		
		// Runes can be 4 blocks around the altar
		double startX = x - 4;
		double endX   = x + 4;
		double startZ = z - 4;
		double endZ   = z + 4;
		
		for (int r = 0; r < 25; r++)
		{
			runeTypes[r] = 0;
		}
		
		for(double i = startX; i <= endX; i++)
		{
			for(double j = startZ; j <= endZ;j++)
			{
				if(world.getBlockState(new BlockPos(i, y, j)).getBlock() == StartupCommon.runeSlab)
				{
					runeCount += 1;
					 TileEntity tileEntity = world.getTileEntity(new BlockPos(i, y, j));
					  if(tileEntity instanceof TileEntityRuneSlab)
					  {
						  for(int r = 0; r < 25; r++)
						  {
							  TileEntityRuneSlab runeSlab = (TileEntityRuneSlab) tileEntity;
							  if(runeSlab.getRuneType() == r)
							  {
								  runeTypes[r] += 1;
							  }
						  }
					  }
				}
			}
		}
		for (int r = 0; r < 25; r++)
			System.out.println(r + " -> " + runeTypes[r]);
		return runeCount;
	}
	
	public static int checkForTorches(World world, BlockPos pos, IBlockState state, EntityPlayer player)
	{
		int torchCount = 0;
		
		// During night time, when the torches are burning, power is bigger ;-) 
  		long time = Minecraft.getMinecraft().theWorld.getWorldTime();
  		if(time < 23500 && time >12800)
  		{
			
			double x = pos.getX();
			double y = pos.getY();
			double z = pos.getZ();
		
			// Torches can be 6 blocks around the altar
			double startX = x - 6;
			double endX   = x + 6;
			double startZ = z - 6;
			double endZ   = z + 6;
		
		
			for(double i = startX; i <= endX; i++)
			{
				for(double j = startZ; j <= endZ;j++)
				{
					if(world.getBlockState(new BlockPos(i, y, j)).getBlock() == thewizardmod.torch.StartupCommon.torch)
					{
						torchCount += 1;
					}
				}
			}
  		}				
		return torchCount;
	}
	
	public static boolean checkForPedestrals(World world, BlockPos pos, IBlockState state, EntityPlayer player)
	{
		int pedestralCount = 0;
		double x = pos.getX();
		double y = pos.getY();
		double z = pos.getZ();
		
		BlockPos blockpos = new BlockPos(x - 3, y, z);
		if(world.getBlockState(blockpos).getBlock() == thewizardmod.pedestral.StartupCommon.pedestral)
		{
			pedestralItems[0] = null;
			TileEntity tileEntity = world.getTileEntity(blockpos);
			if(tileEntity instanceof TileEntityPedestral)
			{
			  TileEntityPedestral pedestral = (TileEntityPedestral) tileEntity;
			  pedestralItems[0] = pedestral.getItem();
			  pedestralPos[0] = blockpos;
			}
			pedestralCount += 1;
		}
		
		blockpos = new BlockPos(x + 3, y, z);
		if(world.getBlockState(blockpos).getBlock() == thewizardmod.pedestral.StartupCommon.pedestral)
		{
			pedestralItems[1] = null;
			TileEntity tileEntity = world.getTileEntity(blockpos);
			if(tileEntity instanceof TileEntityPedestral)
			{
			  TileEntityPedestral pedestral = (TileEntityPedestral) tileEntity;
			  pedestralItems[1] = pedestral.getItem();
			  pedestralPos[1] = blockpos;
			}
			pedestralCount += 1;
		}
		
		blockpos = new BlockPos(x, y, z - 3);
		if(world.getBlockState(blockpos).getBlock() == thewizardmod.pedestral.StartupCommon.pedestral)
		{
			pedestralItems[2] = null;
			TileEntity tileEntity = world.getTileEntity(blockpos);
			if(tileEntity instanceof TileEntityPedestral)
			{
			  TileEntityPedestral pedestral = (TileEntityPedestral) tileEntity;
			  pedestralItems[2] = pedestral.getItem();
			  pedestralPos[2] = blockpos;
			}
			pedestralCount += 1;
		}
		
		blockpos = new BlockPos(x, y, z + 3);
		if(world.getBlockState(blockpos).getBlock() == thewizardmod.pedestral.StartupCommon.pedestral)
		{
			pedestralItems[3] = null;
			TileEntity tileEntity = world.getTileEntity(blockpos);
			if(tileEntity instanceof TileEntityPedestral)
			{
			  TileEntityPedestral pedestral = (TileEntityPedestral) tileEntity;
			  pedestralItems[3] = pedestral.getItem();
			  pedestralPos[3] = blockpos;
			}
			pedestralCount += 1;
		}
		if(pedestralCount == 4)
		{
			return true;
		}
		return false;
		
	}
}
