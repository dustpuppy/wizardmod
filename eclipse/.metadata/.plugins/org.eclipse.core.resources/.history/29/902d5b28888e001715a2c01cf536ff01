package thewizardmod.machines;

import net.minecraft.block.Block;
import net.minecraft.block.ITileEntityProvider;
import net.minecraft.block.properties.IProperty;
import net.minecraft.block.properties.PropertyBool;
import net.minecraft.block.properties.PropertyDirection;
import net.minecraft.block.properties.PropertyEnum;
import net.minecraft.block.state.BlockStateContainer;
import net.minecraft.block.state.IBlockState;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.SoundEvents;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.InventoryHelper;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraftforge.items.CapabilityItemHandler;
import net.minecraftforge.items.IItemHandler;
import thewizardmod.TheWizardMod;
import thewizardmod.Gui.GuiHandler;
import thewizardmod.Util.EnumHandler;
import thewizardmod.machines.EnumHandler.EnumType;

public class BlockExtractor extends BlockMachineFrame  implements ITileEntityProvider{

	  public static final PropertyDirection PROPERTYFACING = PropertyDirection.create("facing");
	  public static final PropertyEnum PROPERTYTYPE = PropertyEnum.create("type", EnumType.class);
	  public static final PropertyBool PROPERTYACTIVATED = PropertyBool.create("activated");

    public BlockExtractor()
	{
	  super();
	  this.setCreativeTab(CreativeTabs.BUILDING_BLOCKS);   // the block will appear on the Blocks tab in creative
	    this.setDefaultState(this.blockState.getBaseState().withProperty(PROPERTYTYPE, EnumType.BASIC).withProperty(PROPERTYFACING, EnumFacing.NORTH).withProperty(PROPERTYACTIVATED, Boolean.valueOf(false)));
	}
	  
    @Override
    protected BlockStateContainer createBlockState()
    {
        return new BlockStateContainer(this, new IProperty[] {PROPERTYFACING, PROPERTYTYPE, PROPERTYACTIVATED});
    }


	@Override
	public boolean canConnectRedstone(IBlockState state, IBlockAccess world, BlockPos pos, EnumFacing side) {
		return true;
	}
	
	public void neighborChanged(IBlockState state, World worldIn, BlockPos pos, Block blockIn)
	{
	  if(worldIn.isBlockPowered(pos)){
		  TileEntityExtractor.setState(true);
	  }else{
		  TileEntityExtractor.setState(false);
	  }
	}

	@Override
	public TileEntity createNewTileEntity(World worldIn, int meta) {

		return new TileEntityExtractor();
	}
	  
	  @Override
	  public IBlockState getStateFromMeta(int meta)
	  {
		EnumType type = EnumType.values()[(int)(meta / EnumFacing.values().length) % EnumType.values().length]; //Gets the type from the meta
		EnumFacing facing = EnumFacing.values()[meta % EnumFacing.values().length]; //Gets the EnumFacing from the meta
	    return this.getDefaultState().withProperty(PROPERTYTYPE, type).withProperty(PROPERTYFACING, facing);
	  }

	  @Override
	  public int getMetaFromState(IBlockState state)
	  {
			EnumType type = (EnumType) state.getValue(PROPERTYTYPE);
			EnumFacing facing = (EnumFacing) state.getValue(PROPERTYFACING);
			int meta = type.getMetadata() * EnumFacing.values().length + facing.ordinal(); //Stores the type the EnumFacing in the meta
			return meta;
	  }

	  @Override
	  public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing blockFaceClickedOn, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
	  {
		  EnumType type = EnumType.byMetadata(meta);
		  // find the quadrant the player is facing
		  EnumFacing enumfacing = (placer == null) ? EnumFacing.NORTH : EnumFacing.fromAngle(placer.rotationYaw);

		  // Place allways same up and down direction
		  return this.getDefaultState().withProperty(PROPERTYFACING, enumfacing).withProperty(PROPERTYTYPE, type);
		  // Place like a dispenser
//	    return this.getDefaultState().withProperty(PROPERTYFACING, BlockPistonBase.getFacingFromEntity(pos, placer)).withProperty(PROPERTYTYPE, type);

		  
		  }
	  
		// This is where you can do something when the block is broken. In this case drop the inventory's contents
		@Override
		public void breakBlock(World worldIn, BlockPos pos, IBlockState state) {

			IInventory inventory = worldIn.getTileEntity(pos) instanceof IInventory ? (IInventory)worldIn.getTileEntity(pos) : null;

			if (inventory != null){
				// For each slot in the inventory
				for (int i = 0; i < inventory.getSizeInventory(); i++){
					// If the slot is not empty
					if (inventory.getStackInSlot(i) != null)
					{
						// Create a new entity item with the item stack in the slot
						EntityItem item = new EntityItem(worldIn, pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5, inventory.getStackInSlot(i));

						// Apply some random motion to the item
						float multiplier = 0.1f;
						float motionX = worldIn.rand.nextFloat() - 0.5f;
						float motionY = worldIn.rand.nextFloat() - 0.5f;
						float motionZ = worldIn.rand.nextFloat() - 0.5f;

						item.motionX = motionX * multiplier;
						item.motionY = motionY * multiplier;
						item.motionZ = motionZ * multiplier;

						// Spawn the item in the world
						worldIn.spawnEntityInWorld(item);
					}
				}

				// Clear the inventory so nothing else (such as another mod) can do anything with the items
				inventory.clear();
			}

			// Super MUST be called last because it removes the tile entity
			super.breakBlock(worldIn, pos, state);
		}
		
		// Called when the block is right clicked
		// In this block it is used to open the blocks gui when right clicked by a player
		@Override
		public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, ItemStack heldItem, EnumFacing side, float hitX, float hitY, float hitZ) {
			// Uses the gui handler registered to your mod to open the gui for the given gui id
			// open on the server side only  (not sure why you shouldn't open client side too... vanilla doesn't, so we better not either)
			if (worldIn.isRemote) return true;


//			if(worldIn.isRemote){
//				worldIn.playSound((EntityPlayer)null, pos.getX(), pos.getY(), pos.getZ(), SoundEvents.BLOCK_CHEST_OPEN, SoundCategory.BLOCKS, 0.5F, worldIn.rand.nextFloat() * 0.1F + 0.9F);
//			}

			playerIn.openGui(TheWizardMod.instance, thewizardmod.TheWizardMod.GUI_ID_EXTRACTOR, worldIn, pos.getX(), pos.getY(), pos.getZ());
			return true;
		}
}
