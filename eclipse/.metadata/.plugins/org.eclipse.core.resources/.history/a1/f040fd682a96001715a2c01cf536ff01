package thewizardmod.fluids;

import javax.annotation.Nullable;

import thewizardmod.gemJar.TileEntityGemJar;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.BlockRenderLayer;
import net.minecraft.util.EnumBlockRenderType;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraftforge.fluids.FluidContainerRegistry;
import net.minecraftforge.fluids.FluidUtil;
import net.minecraftforge.fluids.capability.CapabilityFluidHandler;
import net.minecraftforge.fluids.capability.IFluidHandler;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class BlockTank extends Block {
	public BlockTank() {
		super(Material.ROCK);
		this.setCreativeTab(CreativeTabs.MISC);
	}

	@SideOnly(Side.CLIENT)
	public BlockRenderLayer getBlockLayer() {
		return BlockRenderLayer.TRANSLUCENT;
	}

	@Override
	public boolean isOpaqueCube(IBlockState iBlockState) {
		return false;
	}

	@Override
	public boolean isFullCube(IBlockState iBlockState) {
		return false;
	}

	@Override
	public EnumBlockRenderType getRenderType(IBlockState iBlockState) {
		return EnumBlockRenderType.MODEL;
	}

	@Override
	@Deprecated
	public boolean hasTileEntity() {
		return true;
	}

	@Override
	public TileEntity createTileEntity(World world, IBlockState state) {
		return new TileEntityTank();
	}

	@Override
	public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack) {
	}


	@Override
	public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, @Nullable ItemStack heldItem, EnumFacing side, float hitX, float hitY, float hitZ) {
		TileEntity tileEntity = worldIn.getTileEntity(pos);
		TileEntity tank = null;
		  if(tileEntity instanceof TileEntityTank)
		  {
			  tank = (TileEntityTank) tileEntity;
		  }

	    int  remaining = ((TileEntityTank) tank).getCapacity() - ((TileEntityTank) tank).getFluidAmount();
	  
	    System.out.println( "remaining = " + Integer.toString( remaining  ) );
	    System.out.println( "capacity  = " + Integer.toString( ((TileEntityTank) tank).getCapacity()  ) );
	    System.out.println( "amount  = " + Integer.toString( ((TileEntityTank) tank).getFluidAmount() ) );
	  
	    if ( ((TileEntityTank) tank).getFluid() != null )
	    {
	      if ( FluidContainerRegistry.isFilledContainer( heldItem ) == true && FluidContainerRegistry.containsFluid( heldItem, ((TileEntityTank) tank).getFluid() ) == true )
	      {
	        if ( remaining >= FluidContainerRegistry.getContainerCapacity( heldItem ) )
	        {
	          ((IFluidHandler) tank).fill( FluidContainerRegistry.getFluidForFilledItem( heldItem ), false );
	  
	          if ( playerIn.capabilities.isCreativeMode == false )
	          {
	        	  heldItem = FluidContainerRegistry.drainFluidContainer( heldItem );
	          }
	  
	          return true;
	        }
	        else
	        {
	          return false;
	        }
	      }
	      else
	      {
	        return false;
	      }
	    }
	    else
	    {
	      ((IFluidHandler) tank).fill( FluidContainerRegistry.getFluidForFilledItem( heldItem ), false );
	  
	      if ( playerIn.capabilities.isCreativeMode == false )
	      {
	    	  heldItem = FluidContainerRegistry.drainFluidContainer( heldItem );
	      }
	  
	      return true;
	    }		
	}

}
