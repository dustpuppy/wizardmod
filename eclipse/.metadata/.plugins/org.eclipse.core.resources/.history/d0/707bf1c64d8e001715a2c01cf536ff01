package thewizardmod.jars;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Nullable;

import net.minecraft.block.Block;
import net.minecraft.block.ITileEntityProvider;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.BlockRenderLayer;
import net.minecraft.util.EnumBlockRenderType;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;
import thewizardmod.items.StartupCommon;

public class BlockJar extends Block implements ITileEntityProvider
{
	private static final AxisAlignedBB BOUNCING_BOX = new AxisAlignedBB(0.0625 * 3, 0, 0.0625 * 3, 0.0625 * 13, 0.0625 * 15, 0.0625 * 13);
	private static final AxisAlignedBB COLLISION_BOX = new AxisAlignedBB(0.0625 * 4, 0, 0.0625 * 4, 0.0625 * 12, 0.0625 * 14, 0.0625 * 12);
	
  public BlockJar()
  {
    super(Material.GLASS);
    this.setCreativeTab(CreativeTabs.MISC);   // the block will appear on the Blocks tab in creative
    

    setHardness(0.3F);
    
  }

  @SideOnly(Side.CLIENT)
  public BlockRenderLayer getBlockLayer()
  {
    return BlockRenderLayer.TRANSLUCENT;
  }

  @Override
  public boolean isOpaqueCube(IBlockState iBlockState) {
    return false;
  }

  @Override
  public boolean isFullCube(IBlockState iBlockState) {
    return false;
  }

  @Override
  @Deprecated
	public boolean hasTileEntity() {
	return true;
  }
  
  @Override
  public EnumBlockRenderType getRenderType(IBlockState iBlockState) {
    return EnumBlockRenderType.MODEL;
  }

  
  @Override
  @Deprecated
  public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
	  return BOUNCING_BOX;
  }
  
  @Override
  @Deprecated
  public void addCollisionBoxToList(IBlockState state, World worldIn, BlockPos pos, AxisAlignedBB entityBox, List<AxisAlignedBB> collidingBoxes, @Nullable Entity entityIn) {
	  super.addCollisionBoxToList(pos, entityBox, collidingBoxes, COLLISION_BOX);
  }

  @Override
  public TileEntity createNewTileEntity(World worldIn, int meta) {
	return new TileEntityJar();
  }
  
  @Override
  public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, @Nullable ItemStack heldItem, EnumFacing side, float hitX, float hitY, float hitZ) {
	  if(!worldIn.isRemote)
	  {
		  TileEntity tileEntity = worldIn.getTileEntity(pos);
		  if(tileEntity instanceof TileEntityJar)
		  {
			  TileEntityJar jar = (TileEntityJar) tileEntity;
			  if(heldItem != null)
			  {
				  if(heldItem.getItem() == StartupCommon.magicGem);
				  {
					  if(jar.addItem())
					  {
						  heldItem.stackSize--;
						  return true;
					  }
				  }
			  }
			  jar.removeItem();
		  }
	  }
	  return true;
  }
  /*
  @Override
  public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
  {
      if (!worldIn.isRemote)
      {
          TileEntity tileEntity = worldIn.getTileEntity(pos);
             
          if (tileEntity instanceof TileEntityJar)
          {
              TileEntityJar jar = (TileEntityJar) tileEntity;
                 
              while (jar.counter > 0)
              {
                  jar.removeItem();
              }
          }
      }
         
      super.breakBlock(worldIn, pos, state);
  }
*/
	public ArrayList<ItemStack> getDrops(World world, int x, int y, int z, int metadata, int fortune) {
		
	ArrayList<ItemStack> items = new ArrayList<ItemStack>();

	BlockPos pos = new BlockPos(x, y, z);
	TileEntity t = world.getTileEntity(pos);

	if (t instanceof TileEntityJar) {
		TileEntityJar tile = (TileEntityJar)t;

		
		NBTTagCompound tag = new NBTTagCompound();
		ItemStack stack = new ItemStack( world.getBlockState(pos).getBlock(), 1, metadata);
		if (!stack.hasTagCompound()) {
			stack.setTagCompound(tag);
		}
		stack.setTagInfo("tileEntityData", tag);
		items.add(stack);
	}

	System.out.println(items);
	return items;

	}
	
    @Override
    public void onBlockPlacedBy(World world, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack) {
        final TileEntityJar tileEntity = (TileEntityJar) world.getTileEntity(pos);
        if (stack.hasTagCompound()) {
            if (tileEntity != null) {
                tileEntity.readFromNBT(stack.getTagCompound().getCompoundTag("tileEntityData"));
            }
        }
    }
}

