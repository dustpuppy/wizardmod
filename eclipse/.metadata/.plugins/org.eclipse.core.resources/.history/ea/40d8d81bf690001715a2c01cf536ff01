package thewizardmod.runeSlab;



import java.util.List;

import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.VertexBuffer;
import net.minecraft.client.renderer.block.model.BakedQuad;
import net.minecraft.client.renderer.block.model.IBakedModel;
import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.init.Blocks;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockAccess;



public class RendererRuneSlab extends TileEntitySpecialRenderer<TileEntityRuneSlab>{

	private static final ResourceLocation texture = new ResourceLocation("thewizardmod:textures/runes/1.png");

	@Override
	public void renderTileEntityAt(TileEntityRuneSlab te, double x, double y, double z, float partialTicks, int destroyStage) {
		super.renderTileEntityAt(te, x, y, z, partialTicks, destroyStage);

		TileEntityRuneSlab tileEntity = (TileEntityRuneSlab)te;
//		if(tileEntity.getRuneType() != 0)
		{
//			System.out.println("Rune type " + tileEntity.getRuneType());

			ItemStack SomeItemStack = new ItemStack(StartupCommon.runeSlab);
			
			Item itemBlock = SomeItemStack.getItem();
			IBlockState blockState = Block.getBlockFromItem(itemBlock).getStateFromMeta(SomeItemStack.getItemDamage());

			IBakedModel model = Minecraft.getMinecraft().getBlockRendererDispatcher().getModelForState(blockState);
			if (model != null)
			{
			List<BakedQuad> quads = model.getQuads(blockState, EnumFacing.UP, 0);

			GlStateManager.pushMatrix();
			GlStateManager.bindTexture(Minecraft.getMinecraft().getTextureMapBlocks().getGlTextureId());

			GlStateManager.translate(x, y, z);
			GlStateManager.scale(1.0D, 1.0D, 1.0D);

			for (BakedQuad quad : quads)
			{
				int color = Minecraft.getMinecraft().getBlockColors().colorMultiplier(blockState, (IBlockAccess)null, (BlockPos)null, quad.getTintIndex());
				VertexBuffer vertexbuffer = Tessellator.getInstance().getBuffer();
				vertexbuffer.begin(7, DefaultVertexFormats.ITEM);
				vertexbuffer.addVertexData(quad.getVertexData());
			}

			Tessellator.getInstance().draw();
			GlStateManager.popMatrix();
			}
		}
	}
	

}
