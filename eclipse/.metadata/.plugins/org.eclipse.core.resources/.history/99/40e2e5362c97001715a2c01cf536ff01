package thewizardmod.fluids;

import javax.annotation.Nullable;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.IInventoryChangedListener;
import net.minecraft.inventory.InventoryBasic;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.play.server.SPacketUpdateTileEntity;
import net.minecraft.util.ITickable;
import net.minecraftforge.fluids.Fluid;
import net.minecraftforge.fluids.FluidStack;
import net.minecraftforge.fluids.FluidUtil;
import net.minecraftforge.fluids.capability.TileFluidHandler;

public class TileEntityTank extends TileFluidHandler implements IInventory, ITickable {
	
	public static final int CAPACITY = 11 * Fluid.BUCKET_VOLUME;

	public FluidTankWithTile tank = null;
	
	public InventoryBasic inventory;
	private int slotCount = 2;
	
	public TileEntityTank() {
		tank = new FluidTankWithTile(this, CAPACITY);
		tank.setFluid(new FluidStack(StartupCommon.fluidMagic, 1));
		
		inventory = new InventoryBasic("tankInventory", false, slotCount);
	}

	
	@Override
	public NBTTagCompound writeToNBT(NBTTagCompound compound) {
		
		NBTTagList list = new NBTTagList();
		for(int i = 0; i < inventory.getSizeInventory(); i++)
		{
			if(inventory.getStackInSlot(i) != null)
			{
				NBTTagCompound tag = new NBTTagCompound();
				tag.setByte("slot", (byte)i);
				inventory.getStackInSlot(i).writeToNBT(tag);
				list.appendTag(tag);
			}
		}
		compound.setTag("itemStacks", list);
		
		return super.writeToNBT(compound);
	}

	@Override
	public void readFromNBT(NBTTagCompound compound) {
		super.readFromNBT(compound);
		
		NBTTagList list = compound.getTagList("itemStacks", 10);
		this.inventory = new InventoryBasic("tankInventory", false, slotCount);
		for(int i = 0; i < list.tagCount(); i++)
		{
			NBTTagCompound tag = list.getCompoundTagAt(i);
			byte b = tag.getByte("slot");
			if(b >=0 && b < inventory.getSizeInventory())
			{
				inventory.setInventorySlotContents(b, ItemStack.loadItemStackFromNBT(tag));
			}
		}
	}
	
	
	@Override
	public NBTTagCompound getUpdateTag() {
		return writeToNBT(new NBTTagCompound());
	}

	@Nullable
	@Override
	public SPacketUpdateTileEntity getUpdatePacket() {
		return new SPacketUpdateTileEntity(getPos(), 0, getUpdateTag());
	}

	@Override
	public void onDataPacket(NetworkManager net, SPacketUpdateTileEntity pkt) {
		readFromNBT(pkt.getNbtCompound());
	}


	@Override
	public String getName() {
		return "container.twm_tank.name";
	}


	@Override
	public boolean hasCustomName() {
		return false;
	}


	@Override
	public int getSizeInventory() {
		return slotCount;
	}


	@Override
	@Nullable
	public ItemStack getStackInSlot(int index) {
		return inventory.getStackInSlot(index);
	}


	@Override
	@Nullable
	public ItemStack decrStackSize(int index, int count) {
		ItemStack itemStackInSlot = getStackInSlot(index);
		if (itemStackInSlot == null) return null;

		ItemStack itemStackRemoved;
		if (itemStackInSlot.stackSize <= count) {
			itemStackRemoved = itemStackInSlot;
			setInventorySlotContents(index, null);
		} else {
			itemStackRemoved = itemStackInSlot.splitStack(count);
			if (itemStackInSlot.stackSize == 0) {
				setInventorySlotContents(index, null);
			}
		}
		markDirty();
		return itemStackRemoved;
	}


	@Override
	@Nullable
	public ItemStack removeStackFromSlot(int index) {
		ItemStack stack = inventory.getStackInSlot(index);
		stack.stackSize--;
		return stack;
	}


	@Override
	public void setInventorySlotContents(int index, @Nullable ItemStack stack) {
		inventory.removeStackFromSlot(index);
		markDirty();
	}


	@Override
	public int getInventoryStackLimit() {
		return 1;
	}


	@Override
	public boolean isUseableByPlayer(EntityPlayer player) {
		return false;
	}


	@Override
	public void openInventory(EntityPlayer player) {
		
	}


	@Override
	public void closeInventory(EntityPlayer player) {
		
	}


	@Override
	public boolean isItemValidForSlot(int index, ItemStack stack) {
		if(stack != null)
		{
			// Empty bucket is allowed
			if (stack.getItem().equals(Items.BUCKET))
			{
				return true;
			}
			// Forge bucket with liquid magic is also allowed
			if(stack.getItem().getUnlocalizedName().compareTo("item.forge.bucketFilled") == 0)
			{
				if (FluidUtil.getFluidContained(stack).isFluidEqual(new FluidStack(StartupCommon.fluidMagic, 1000)))
				{
					return true;
				}
			}
		}
		return false;
	}


	@Override
	public int getField(int id) {
		return 0;
	}


	@Override
	public void setField(int id, int value) {
		
	}


	@Override
	public int getFieldCount() {
		return 0;
	}


	@Override
	public void clear() {
		inventory.setInventorySlotContents(0, null);
		inventory.setInventorySlotContents(1, null);
	}


	@Override
	public void update() {
		// there is a bucket in the input slot
		if(getStackInSlot(0) != null)
		{
			System.out.println(tank.getFluidAmount());
			// check if there's enough space in the tank
			if(tank.getFluidAmount() + 1000 < tank.getCapacity())
			{
				// put one bucket of fluid into tank
				tank.fill(new FluidStack(StartupCommon.fluidMagic, 1000), true);
				//clear the input slot
				setInventorySlotContents(0, null);
				setInventorySlotContents(1, new ItemStack(Items.BUCKET));
				markDirty();
			}
		}
	}




}