package thewizardmod.fluids;

import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.fluids.FluidStack;
import net.minecraftforge.fluids.FluidTankInfo;
import net.minecraftforge.fluids.IFluidTank;

public class TileEntityTank
  extends TileEntity
  implements IFluidTank
{
  private FluidStack Fluid;
  private int  RemainingFluid = Integer.MAX_VALUE - 1;

  public TileEntityTank()
  {
  }

  public boolean canFill()
  {
    return true;
  }

  public boolean canDrain()
  {
    return true;
  }

  @Override
  public FluidStack getFluid()
  {
    return this.Fluid;
  }

  @Override
  public int getFluidAmount()
  {
    if ( this.Fluid != null )
    {
      return this.Fluid.amount;
    }
    else
    {
      return 0;
    }
  }

  @Override
  public int getCapacity()
  {
    return Integer.MAX_VALUE;
  }

  @Override
  public FluidTankInfo getInfo()
  {
    return new FluidTankInfo( this.Fluid, this.getCapacity() );
  }

  @Override
  public int fill( FluidStack resource, boolean doFill )
  {
    if ( this.Fluid == null )
    {
      this.Fluid  = new FluidStack( resource, resource.amount );
      this.RemainingFluid -= resource.amount;
  
      return resource.amount;
    }
    else
    {
      if ( this.Fluid.isFluidEqual( resource ) == true )
      {
        if ( this.Fluid.amount < this.getCapacity() )
        {
          if ( this.RemainingFluid > resource.amount )
          {
            this.Fluid.amount  += resource.amount;
            this.RemainingFluid -= resource.amount;
  
            return resource.amount;
          }
          else // resource.amount > this.RemainingFluid
          {
            int FillAmount = resource.amount = this.RemainingFluid;
  
            this.Fluid.amount  += resource.amount - this.RemainingFluid;
            this.RemainingFluid  = 0;
  
            return FillAmount;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }

  @Override
  public FluidStack drain( int maxDrain, boolean doDrain )
  {
    if ( this.Fluid.amount == 0 )
    {
      return new FluidStack( this.Fluid.fluidID, 0 );
    }
    if ( maxDrain >= this.Fluid.amount )
    {
      int DrainAmount = maxDrain - this.Fluid.amount;
  
      this.Fluid.amount  = 0;
      this.RemainingFluid  = this.getCapacity();
  
      return new FluidStack( this.Fluid.fluidID, DrainAmount );
    }
    else
    {
      this.Fluid.amount  -= maxDrain;
      this.RemainingFluid += maxDrain;
  
      return new FluidStack( this.Fluid.fluidID, maxDrain );
    }
  }

  @Override
  public void writeToNBT( NBTTagCompound nbt )
  {
    super.writeToNBT( nbt );
  }

  @Override
  public void readFromNBT( NBTTagCompound nbt )
  {
    super.readFromNBT( nbt );
  }
}