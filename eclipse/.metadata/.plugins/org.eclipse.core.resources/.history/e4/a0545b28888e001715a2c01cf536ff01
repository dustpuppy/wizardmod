package thewizardmod.machines;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.IContainerListener;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;
import net.minecraftforge.items.CapabilityItemHandler;
import net.minecraftforge.items.IItemHandler;
import net.minecraftforge.items.SlotItemHandler;

public class ContainerExtractor extends Container{

	private TileEntityExtractor te;
	private IItemHandler handler;
	
	public ContainerExtractor(IInventory playerInv, TileEntityExtractor te){
		this.te = te;
		this.handler = te.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null); //Gets the inventory from our tile entity

		//Our tile entity slots
		this.addSlotToContainer(new InputSlot(handler, 0, 26, 17));
		this.addSlotToContainer(new InputSlot(handler, 1, 26, 35));
		this.addSlotToContainer(new InputSlot(handler, 2, 26, 53));
		
		this.addSlotToContainer(new OutputSlot(handler, 4, 98, 35));
		
		this.addSlotToContainer(new UpdateSlot(handler, 6, 155, 5));
		
		//The player's inventory slots
		int xPos = 8; //The x position of the top left player inventory slot on our texture
		int yPos = 84; //The y position of the top left player inventory slot on our texture

		//Player slots
		for (int y = 0; y < 3; ++y) {
			for (int x = 0; x < 9; ++x) {
				this.addSlotToContainer(new Slot(playerInv, x + y * 9 + 9, xPos + x * 18, yPos + y * 18));
			}
		}

		for (int x = 0; x < 9; ++x) {
			this.addSlotToContainer(new Slot(playerInv, x, xPos + x * 18, yPos + 58));
		}
	}
	
	// Return true if the given player is able to use this block. In this case it checks that
	// Vanilla calls this method every tick to make sure the player is still able to access the inventory, and if not closes the gui
	@Override
	public boolean canInteractWith(EntityPlayer player)
	{
		return true;
	}

	// This is where you specify what happens when a player shift clicks a slot in the gui
	//  (when you shift click a slot in the TileEntity Inventory, it moves it to the first available position in the hotbar and/or
	//    player inventory.  When you you shift-click a hotbar or player inventory item, it moves it to the first available
	//    position in the TileEntity inventory)
	// At the very least you must override this and return null or the game will crash when the player shift clicks a slot
	// returns null if the source slot is empty, or if none of the the source slot items could be moved
	//   otherwise, returns a copy of the source stack
	@Override
	public ItemStack transferStackInSlot(EntityPlayer player, int fromSlot)
	{
	    Slot slot = (Slot) this.inventorySlots.get(fromSlot);
		ItemStack sourceStack = slot.getStack();
		ItemStack copyOfSourceStack = sourceStack.copy();

	    if (slot != null && slot.getHasStack()) {
	        ItemStack current = slot.getStack();

	        if (fromSlot < this.handler.getSlots()) {
	            // From the block breaker inventory to player's inventory
	            if (!this.mergeItemStack(current, handler.getSlots(), handler.getSlots() + 36 - 3, true))
	                return null;
	        } else {
	            // From the player's inventory to block breaker's inventory
	            if (!this.mergeItemStack(current, 0, handler.getSlots() - 4, false))
	                return null;
	        }

			// If stack size == 0 (the entire stack was moved) set slot contents to null
			if (sourceStack.stackSize == 0) {
				slot.putStack(null);
			} else {
				slot.onSlotChanged();
			}

	    }
		slot.onPickupFromSlot(player, sourceStack);
		return copyOfSourceStack;
	}


}
